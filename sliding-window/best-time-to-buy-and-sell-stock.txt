def max_profit(prices):
    if not prices:
        return 0

    min_price = float('inf')
    max_profit = 0

    for price in prices:
        # Update the minimum price so far
        min_price = min(min_price, price)
        # Calculate potential profit and update max profit if it's higher
        profit = price - min_price
        max_profit = max(max_profit, profit)

    return max_profit

# Example usage
prices = [7, 1, 5, 3, 6, 4]
print("Maximum Profit:", max_profit(prices))

You are given an array prices where prices[i] is the price of a stock on the i-th day.
You want to maximize your profit by choosing one day to buy and one day in the future to sell.
# Example usage
prices = [7, 1, 5, 3, 6, 4]
print("Maximum Profit:", max_profit(prices))
# Output: Maximum Profit: 5
In this example, buying at 1 and selling at 6 yields the maximum profit of 5.
Step-by-Step Explanation:
1.Initialize Variables:
   min_price = float('inf')  # Smallest price we've seen so far (initially set to infinity)
   max_profit = 0            # Max profit we've found so far
2.Iterate Over Prices:
   Loop through each day's price:
      for price in prices:
3.Day 1 (price = 7):
  min_price = min(inf, 7) = 7
  profit = 7 - 7 = 0
  max_profit = max(0, 0) = 0
4.Day 2 (price = 1):
  min_price = min(7, 1) = 1 → This is our new best day to buy.
  profit = 1 - 1 = 0
  max_profit = max(0, 0) = 0
5.Day 3 (price = 5):
  min_price = min(1, 5) = 1 → still keeping the lowest buy price
  profit = 5 - 1 = 4
  max_profit = max(0, 4) = 4
6.Day 4 (price = 3):
  min_price = min(1, 3) = 1
  profit = 3 - 1 = 2
  max_profit = max(4, 2) = 4 → no change
7.Day 5 (price = 6):
  min_price = min(1, 6) = 1
  profit = 6 - 1 = 5
  max_profit = max(4, 5) = 5 → new max profit
8.Day 6 (price = 4):
  min_price = min(1, 4) = 1
  profit = 4 - 1 = 3
  max_profit = max(5, 3) = 5 → no change
Final Result:
  The best time to buy is on Day 2 at price 1
  The best time to sell is on Day 5 at price 6
  Max profit = 6 - 1 = 5
